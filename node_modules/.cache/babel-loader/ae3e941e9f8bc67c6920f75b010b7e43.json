{"ast":null,"code":"var _jsxFileName = \"/Users/Rasheed/WS/REPOS/full-mern-stack-video/client/src/pages/Convert/Convert.js\";\nimport { Component, React, useState } from 'react';\nimport { Link } from \"react-router-dom\";\nimport \"../style.css\";\nimport { credentials } from \"../../credentials\";\nimport DataHound from \"./DataHound\";\nimport Example from \"./Example\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Convert extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: []\n    };\n  }\n\n  get_playlist_id(URL) {\n    //https://www.youtube.com/watch?v=EwdsnGfrd-k&list=PL7RVBKKO9UqyEr8kqLe9152SIktQjDl64\n    const num_equal_signs = (URL.match(/=/g) || []).length;\n    if (URL !== null && num_equal_signs === 1) return URL.split(\"=\")[1];else if (URL !== null && num_equal_signs === 2) return URL.split(\"=\")[2];else return -1;\n  }\n\n  get_api_URL(playlist_ID, key) {\n    //AIzaSyBK9I7LUg_7JHmSg8QrNhxkwK98MnuOKKQ\n    if (playlist_ID === -1) return \"No GET address\";else return 'https://youtube.googleapis.com/youtube/v3/playlistItems?part=snippet%2CcontentDetails&maxResults=25&playlistId=' + playlist_ID + '&key=' + key;\n  }\n\n  get_title_list(get_url) {\n    var data = null;\n    var title_list = [];\n    fetch(get_url, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    }).then(res => res.json()).then(json => {\n      data = json;\n\n      for (var i = 0; i < data.items.length; i++) {\n        title_list.push(data.items[i].snippet.title);\n      }\n\n      this.setState({\n        data: title_list\n      });\n    });\n  }\n\n  main() {\n    const {\n      fullURL\n    } = props.userDetails;\n    const playlist_ID = get_playlist_id(fullURL);\n    const get_address = get_api_URL(playlist_ID, credentials.youtube_API_key);\n    const title_list = get_title_list(get_address);\n    console.log(title_list); //search_Spotify(title_list) \n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"jumbotron text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Conversion Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => main(),\n        children: \"Do the thing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Datahound\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DataHound, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Convert;","map":{"version":3,"sources":["/Users/Rasheed/WS/REPOS/full-mern-stack-video/client/src/pages/Convert/Convert.js"],"names":["Component","React","useState","Link","credentials","DataHound","Example","Convert","constructor","state","data","get_playlist_id","URL","num_equal_signs","match","length","split","get_api_URL","playlist_ID","key","get_title_list","get_url","title_list","fetch","headers","then","res","json","i","items","push","snippet","title","setState","main","fullURL","props","userDetails","get_address","youtube_API_key","console","log","render"],"mappings":"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","sourcesContent":["import { Component, React, useState } from 'react'\nimport { Link } from \"react-router-dom\";\n\nimport \"../style.css\"\nimport { credentials } from \"../../credentials\"\nimport DataHound from \"./DataHound\"\nimport Example from \"./Example\"\n\nclass Convert extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n            data: []\n        }\n    }\n\n\n    get_playlist_id(URL) {\n        //https://www.youtube.com/watch?v=EwdsnGfrd-k&list=PL7RVBKKO9UqyEr8kqLe9152SIktQjDl64\n        const num_equal_signs = (URL.match(/=/g) || []).length\n        if (URL !== null && num_equal_signs === 1)\n            return URL.split(\"=\")[1];\n        else if (URL !== null && num_equal_signs === 2)\n            return URL.split(\"=\")[2];\n        else\n            return -1\n    }\n\n    get_api_URL(playlist_ID, key) {\n        //AIzaSyBK9I7LUg_7JHmSg8QrNhxkwK98MnuOKKQ\n        if (playlist_ID === -1)\n            return \"No GET address\"\n        else\n            return 'https://youtube.googleapis.com/youtube/v3/playlistItems?part=snippet%2CcontentDetails&maxResults=25&playlistId=' + playlist_ID + '&key=' + key\n    }\n\n\n    get_title_list(get_url) {\n        var data = null\n        var title_list = []\n        fetch(get_url, {\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        })\n            .then((res) => res.json())\n            .then((json) => {\n                data = json\n                for (var i = 0; i < data.items.length; i++) {\n                    title_list.push(data.items[i].snippet.title)\n                }\n                this.setState({\n                    data: title_list\n                })\n            })\n    }\n\n    main() {\n        const { fullURL } = props.userDetails;\n        const playlist_ID = get_playlist_id(fullURL)\n        const get_address = get_api_URL(playlist_ID, credentials.youtube_API_key)\n        const title_list = get_title_list(get_address)\n        console.log(title_list)\n        //search_Spotify(title_list) \n    }\n\n\n    render() {\n        return (\n            <div class=\"jumbotron text-center\" >\n\n                <h1>Conversion Page</h1>\n                <br />\n                <button type=\"button\" onClick={() => main()}>\n                    Do the thing\n                </button>\n                <br />\n                <br />\n\n\n                <p>Datahound</p>\n                <DataHound />\n            </div >\n        )\n    }\n\n}\n\nexport default Convert"]},"metadata":{},"sourceType":"module"}