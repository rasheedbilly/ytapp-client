{"ast":null,"code":"var _jsxFileName = \"/Users/Rasheed/WS/REPOS/full-mern-stack-video/client/src/pages/Convert/Convert.js\",\n    _s = $RefreshSig$();\n\nimport { React, useEffect, useState } from 'react';\nimport { Link } from \"react-router-dom\";\nimport axios from 'axios';\nimport \"../style.css\";\nimport { credentials } from \"../../credentials\";\nimport DataHound from \"./DataHound\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const playlist_uris = [];\n\n  function get_playlist_id(URL) {\n    console.log(\"URL in convert\", props.userDetails.fullURL);\n    console.log(\"user_id in convert\", localStorage.getItem(\"user_id\"));\n    console.log(\"user_token in convert\", localStorage.getItem(\"user_token\")); //https://www.youtube.com/watch?v=EwdsnGfrd-k&list=PL7RVBKKO9UqyEr8kqLe9152SIktQjDl64\n\n    const num_equal_signs = (URL.match(/=/g) || []).length;\n    if (URL !== null && num_equal_signs === 1) return URL.split(\"=\")[1];else if (URL !== null && num_equal_signs === 2) return URL.split(\"=\")[2];else return -1;\n  }\n\n  function get_api_URL(playlist_ID, key) {\n    //AIzaSyBK9I7LUg_7JHmSg8QrNhxkwK98MnuOKKQ\n    if (playlist_ID === -1) return \"No GET address\";else return 'https://youtube.googleapis.com/youtube/v3/playlistItems?part=snippet%2CcontentDetails&maxResults=25&playlistId=' + playlist_ID + '&key=' + key;\n  }\n\n  function get_title_list(get_url) {\n    var data = null;\n    var title_list = [];\n    fetch(get_url, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    }).then(res => res.json()).then(json => {\n      data = json; //trim data\n\n      for (var i = 0; i < data.items.length; i++) {\n        title_list.push(data.items[i].snippet.title);\n      } //Remove extra\n\n\n      for (var i = 0; i < title_list.length; i++) {\n        title_list[i] = title_list[i].replace(/\\(.+\\)/ig, '').replace(/\\[.+\\]/ig, '').replace(/official/ig, '').replace(/featuring/ig, '').replace(/feat/ig, '').replace(/video/ig, '').replace(/1080p/ig, '').replace(/music/ig, '').replace(/Audio/ig, '');\n      } //\"https://api.spotify.com/v1/search?query=track%3A{}+artist%3A{}&type=track&offset=0&limit=20\"\n\n\n      var query = \"\";\n      var pre_query = \"https://api.spotify.com/v1/search?query=\";\n      var post_query = \"&type=track&offset=0&limit=20\";\n\n      for (var i = 0; i < title_list.length; i++) {\n        if (title_list[i].includes(\"-\")) {\n          query = \"track:\" + title_list[i].split(\"-\")[1].trim() + \"+\" + \"artist:\" + title_list[i].split(\"-\")[0].trim();\n          query = query.replace(/\\s/ig, '%20');\n        } else {\n          query = \"track:Never%20Gonna%20Give%20You%20Up+artist:Rick%20Ashley\";\n        }\n\n        title_list[i] = pre_query + query + post_query;\n      } //clear data\n\n\n      props.userDetails.data = title_list;\n      props.userDetails.DataisLoaded = true;\n    }).then(() => {\n      get_tracks(title_list);\n    });\n  }\n\n  function get_tracks(title_uri_list) {\n    var mylist = [];\n    axios('https://accounts.spotify.com/api/token', {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': 'Basic ' + btoa(credentials.spotify_API_ID + ':' + credentials.spotify_API_key)\n      },\n      data: 'grant_type=client_credentials',\n      method: 'POST'\n    }).then(tokenResponse => {\n      //Loop through\n      for (var i = 0; i < title_uri_list.length; i++) {\n        axios(title_uri_list[i], {\n          method: 'GET',\n          headers: {\n            'Authorization': 'Bearer ' + tokenResponse.data.access_token,\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          }\n        }).then(serchResponse => {\n          try {\n            //Assign trackID\n            title_uri_list[i] = \"spotify:track:\" + serchResponse.data[\"tracks\"][\"items\"][0][\"id\"] + \",\";\n          } catch (error) {\n            //Rick Ashley\n            title_uri_list[i] = \"spotify:track:4cOdK2wGLETKBW3PvgPWqT,\";\n          }\n\n          mylist.push(title_uri_list[i]);\n        }); //end then(searchResponse)\n      } //end For loop\n\n\n      console.log(\"Convert Token:\", tokenResponse.data.access_token);\n      console.log(\"User ID\", props.userDetails.UserID);\n      console.log(\"Document values:\", document.getElementsByTagName('form')[0]); //Make pLaylist - myList has uris\n      //const create_playlist_endpoint = \"https://api.spotify.com/v1/users/\" + props.userDetails.UserID + \"/playlists\";\n      //axios(create_playlist_endpoint, {\n      //    method: 'POST',\n      //    headers: {\n      //        'Accept': 'application/json',\n      //        'Content-Type': 'application/json',\n      //        'Authorization': 'Bearer ' + tokenResponse.data.access_token,\n      //    },\n      //    data: {\n      //        \"name\": \"Youtube Playlist\",\n      //        \"description\": \"Playlist of songs converted from a youtube playlist\",\n      //        \"public\": false\n      //    }\n      //}).then(res => {\n      //    //PLAYLIST_ID = res[\"data\"][\"id\"]\n      //    console.log(\"PLAYLIST_ID\", res[\"data\"][\"id\"])\n      //})\n    }).then(() => {//Add tracks to playlist\n    });\n  }\n\n  const {\n    fullURL\n  } = props.userDetails; //const spotifyID = 1254511451;\n\n  const playlist_ID = get_playlist_id(fullURL);\n  const get_address = get_api_URL(playlist_ID, credentials.youtube_API_key);\n  get_title_list(get_address);\n  get_tracks(props.userDetails.data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"jumbotron text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Conversion Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this), fullURL ? /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: `Converting from: ${fullURL}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No URL entered\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => props.onClear(),\n      children: \"clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: \"Go back \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 9\n  }, this);\n} //<br />\n//<br />\n//<p><b>playlist_ID:</b> {`${playlist_ID}`}</p>\n//<p><b>GET address:</b> {`${get_address}`}</p>\n//<p><b>Data:</b> {props.userDetails.data}</p>\n\n\n_s(App, \"SgJNvxCJGFdeOAtwrbP0deyH+WA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Rasheed/WS/REPOS/full-mern-stack-video/client/src/pages/Convert/Convert.js"],"names":["React","useEffect","useState","Link","axios","credentials","DataHound","App","props","data","setData","loading","setLoading","playlist_uris","get_playlist_id","URL","console","log","userDetails","fullURL","localStorage","getItem","num_equal_signs","match","length","split","get_api_URL","playlist_ID","key","get_title_list","get_url","title_list","fetch","headers","then","res","json","i","items","push","snippet","title","replace","query","pre_query","post_query","includes","trim","DataisLoaded","get_tracks","title_uri_list","mylist","btoa","spotify_API_ID","spotify_API_key","method","tokenResponse","access_token","serchResponse","error","UserID","document","getElementsByTagName","get_address","youtube_API_key","onClear"],"mappings":"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","sourcesContent":["import { React, useEffect, useState } from 'react'\nimport { Link } from \"react-router-dom\";\nimport axios from 'axios';\n\nimport \"../style.css\"\nimport { credentials } from \"../../credentials\"\nimport DataHound from \"./DataHound\"\n\n\nfunction App(props) {\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(false)\n    const playlist_uris = []\n\n    function get_playlist_id(URL) {\n        \n        console.log(\"URL in convert\", props.userDetails.fullURL)\n        console.log(\"user_id in convert\", localStorage.getItem(\"user_id\"))\n        console.log(\"user_token in convert\", localStorage.getItem(\"user_token\"))\n        //https://www.youtube.com/watch?v=EwdsnGfrd-k&list=PL7RVBKKO9UqyEr8kqLe9152SIktQjDl64\n        const num_equal_signs = (URL.match(/=/g) || []).length\n        if (URL !== null && num_equal_signs === 1)\n            return URL.split(\"=\")[1];\n        else if (URL !== null && num_equal_signs === 2)\n            return URL.split(\"=\")[2];\n        else\n            return -1\n    }\n\n    function get_api_URL(playlist_ID, key) {\n        //AIzaSyBK9I7LUg_7JHmSg8QrNhxkwK98MnuOKKQ\n        if (playlist_ID === -1)\n            return \"No GET address\"\n        else\n            return 'https://youtube.googleapis.com/youtube/v3/playlistItems?part=snippet%2CcontentDetails&maxResults=25&playlistId=' + playlist_ID + '&key=' + key\n    }\n\n    function get_title_list(get_url) {\n        var data = null\n        var title_list = []\n        fetch(get_url, {\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        })\n            .then((res) => res.json())\n            .then((json) => {\n                data = json\n                //trim data\n                for (var i = 0; i < data.items.length; i++) {\n                    title_list.push(data.items[i].snippet.title)\n                }\n\n                //Remove extra\n                for (var i = 0; i < title_list.length; i++) {\n                    title_list[i] = title_list[i]\n                        .replace(/\\(.+\\)/ig, '')\n                        .replace(/\\[.+\\]/ig, '')\n                        .replace(/official/ig, '')\n                        .replace(/featuring/ig, '')\n                        .replace(/feat/ig, '')\n                        .replace(/video/ig, '')\n                        .replace(/1080p/ig, '')\n                        .replace(/music/ig, '')\n                        .replace(/Audio/ig, '')\n                }\n                //\"https://api.spotify.com/v1/search?query=track%3A{}+artist%3A{}&type=track&offset=0&limit=20\"\n                var query = \"\"\n                var pre_query = \"https://api.spotify.com/v1/search?query=\"\n                var post_query = \"&type=track&offset=0&limit=20\"\n                for (var i = 0; i < title_list.length; i++) {\n                    if (title_list[i].includes(\"-\")) {\n                        query = \"track:\" + title_list[i].split(\"-\")[1].trim() + \"+\" +\n                            \"artist:\" + title_list[i].split(\"-\")[0].trim()\n                        query = query.replace(/\\s/ig, '%20')\n                    }\n                    else {\n                        query = \"track:Never%20Gonna%20Give%20You%20Up+artist:Rick%20Ashley\"\n                    }\n                    title_list[i] = pre_query + query + post_query\n                }\n                //clear data\n                props.userDetails.data = title_list\n                props.userDetails.DataisLoaded = true\n            })\n            .then(() => {\n                get_tracks(title_list)\n            })\n    }\n\n    function get_tracks(title_uri_list) {\n        var mylist = []\n        axios('https://accounts.spotify.com/api/token', {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Authorization': 'Basic ' + btoa(credentials.spotify_API_ID + ':' + credentials.spotify_API_key)\n            },\n            data: 'grant_type=client_credentials',\n            method: 'POST'\n        }).then(tokenResponse => {\n            //Loop through\n            for (var i = 0; i < title_uri_list.length; i++) {\n                axios(title_uri_list[i], {\n                    method: 'GET',\n                    headers: {\n                        'Authorization': 'Bearer ' + tokenResponse.data.access_token,\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json',\n                    }\n                })\n                    .then(serchResponse => {\n                        try {\n                            //Assign trackID\n                            title_uri_list[i] = \"spotify:track:\" + serchResponse.data[\"tracks\"][\"items\"][0][\"id\"] + \",\"\n                        } catch (error) {\n                            //Rick Ashley\n                            title_uri_list[i] = \"spotify:track:4cOdK2wGLETKBW3PvgPWqT,\"\n                        }\n                        mylist.push(title_uri_list[i])\n                    })//end then(searchResponse)\n            } //end For loop\n            console.log(\"Convert Token:\", tokenResponse.data.access_token)\n            console.log(\"User ID\", props.userDetails.UserID)\n\n            console.log(\"Document values:\", document.getElementsByTagName('form')[0])\n\n            //Make pLaylist - myList has uris\n            //const create_playlist_endpoint = \"https://api.spotify.com/v1/users/\" + props.userDetails.UserID + \"/playlists\";\n            //axios(create_playlist_endpoint, {\n            //    method: 'POST',\n            //    headers: {\n            //        'Accept': 'application/json',\n            //        'Content-Type': 'application/json',\n            //        'Authorization': 'Bearer ' + tokenResponse.data.access_token,\n            //    },\n            //    data: {\n            //        \"name\": \"Youtube Playlist\",\n            //        \"description\": \"Playlist of songs converted from a youtube playlist\",\n            //        \"public\": false\n            //    }\n            //}).then(res => {\n            //    //PLAYLIST_ID = res[\"data\"][\"id\"]\n            //    console.log(\"PLAYLIST_ID\", res[\"data\"][\"id\"])\n            //})\n\n        }).then(() => {\n            //Add tracks to playlist\n\n\n        })\n    }\n\n\n\n    const { fullURL } = props.userDetails;\n    \n    //const spotifyID = 1254511451;\n    const playlist_ID = get_playlist_id(fullURL)\n    const get_address = get_api_URL(playlist_ID, credentials.youtube_API_key)\n    get_title_list(get_address)\n    get_tracks(props.userDetails.data)\n\n    return (\n        <div class=\"jumbotron text-center\">\n\n            <h1>Conversion Page</h1>\n            {fullURL ? (\n                <h3>{`Converting from: ${fullURL}`}</h3>\n            ) : (\n                <p>No URL entered</p>\n            )}\n            <button type=\"button\" onClick={() => props.onClear()}>\n                clear\n            </button>\n            <br />\n            <button>\n                <Link to=\"/\">Go back </Link>\n            </button>\n\n\n\n        </div>\n    )\n}\n//<br />\n//<br />\n//<p><b>playlist_ID:</b> {`${playlist_ID}`}</p>\n//<p><b>GET address:</b> {`${get_address}`}</p>\n//<p><b>Data:</b> {props.userDetails.data}</p>\nexport default App"]},"metadata":{},"sourceType":"module"}