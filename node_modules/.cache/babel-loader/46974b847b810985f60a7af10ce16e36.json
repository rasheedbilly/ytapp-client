{"ast":null,"code":"var _jsxFileName = \"/Users/Rasheed/WS/REPOS/full-mern-stack-video/client/src/pages/Convert/DataHound.js\";\nimport { Component } from \"react\";\nimport \"./style.css\";\nimport { credentials } from \"../../credentials\"; //Please be responsible with my API key :)\n//API Key - AIzaSyBK9I7LUg_7JHmSg8QrNhxkwK98MnuOKKQ\n//Test URL - https://www.youtube.com/playlist?list=PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU\n//Test URL - https://www.youtube.com/watch?v=EwdsnGfrd-k&list=PL7RVBKKO9UqyEr8kqLe9152SIktQjDl64\n//Test URL - https://www.youtube.com/watch?list=PL7RVBKKO9UqyEr8kqLe9152SIktQjDl64&v=EwdsnGfrd-k\n//https://youtube.googleapis.com/youtube/v3/playlistItems?part=snippet%2CcontentDetails&maxResults=25&playlistId=PLBCF2DAC6FFB574DE&key=AIzaSyBK9I7LUg_7JHmSg8QrNhxkwK98MnuOKKQ\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DataHound extends Component {\n  constructor() {\n    super();\n    this.state = {\n      url: \"\",\n      data: []\n    };\n  } //Extracts the playlist ID from the URL\n\n\n  get_playlist_id(URL) {\n    //https://www.youtube.com/watch?v=EwdsnGfrd-k&list=PL7RVBKKO9UqyEr8kqLe9152SIktQjDl64\n    const num_equal_signs = (URL.match(/=/g) || []).length;\n    if (URL !== null && num_equal_signs === 1) return URL.split(\"=\")[1];else if (URL !== null && num_equal_signs === 2) return URL.split(\"=\")[2];else return -1;\n  } //Generatres API URL from playlist ID\n\n\n  get_api_URL(playlist_ID, key) {\n    //AIzaSyBK9I7LUg_7JHmSg8QrNhxkwK98MnuOKKQ\n    if (playlist_ID === -1) return \"No GET address\";else return 'https://youtube.googleapis.com/youtube/v3/playlistItems?part=snippet%2CcontentDetails&maxResults=25&playlistId=' + playlist_ID + '&key=' + key;\n  } //Gets the list of video titles from API call\n\n\n  get_title_list(get_url) {\n    var data = null;\n    var title_list = [];\n    fetch(get_url).then(res => res.json()).then(json => {\n      //console.log(json)\n      //data = json\n      //for (var i = 0; i < data.items.length; i++) {\n      //    title_list.push(data.items[i].snippet.title)\n      //}\n      this.updateData(json);\n    });\n  }\n\n  updateData(newData) {\n    this.setState({\n      data: newData\n    });\n  }\n\n  Hound(url) {\n    console.log(\"Starting the Hound\");\n    console.log(\"url\", url);\n    const playlist_id = this.get_playlist_id(url);\n    console.log(\"playlist_id:\", playlist_id);\n    const api_url = this.get_api_URL(playlist_id, credentials.youtube_API_key); //console.log(\"api_url\", api_url)\n\n    this.get_title_list(api_url); //console.log(\"title_list\", title_list)\n  } //Hound(data)\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Data is: \", this.props.data]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default DataHound;","map":{"version":3,"sources":["/Users/Rasheed/WS/REPOS/full-mern-stack-video/client/src/pages/Convert/DataHound.js"],"names":["Component","credentials","DataHound","constructor","state","url","data","get_playlist_id","URL","num_equal_signs","match","length","split","get_api_URL","playlist_ID","key","get_title_list","get_url","title_list","fetch","then","res","json","updateData","newData","setState","Hound","console","log","playlist_id","api_url","youtube_API_key","render","props"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,OAAO,aAAP;AACA,SAASC,WAAT,QAA4B,mBAA5B,C,CAEA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,SAAN,SAAwBF,SAAxB,CAAkC;AAE9BG,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,GAAG,EAAE,EADI;AAETC,MAAAA,IAAI,EAAE;AAFG,KAAb;AAIH,GAR6B,CAU9B;;;AACAC,EAAAA,eAAe,CAACC,GAAD,EAAM;AACjB;AACA,UAAMC,eAAe,GAAG,CAACD,GAAG,CAACE,KAAJ,CAAU,IAAV,KAAmB,EAApB,EAAwBC,MAAhD;AACA,QAAIH,GAAG,KAAK,IAAR,IAAgBC,eAAe,KAAK,CAAxC,EACI,OAAOD,GAAG,CAACI,KAAJ,CAAU,GAAV,EAAe,CAAf,CAAP,CADJ,KAEK,IAAIJ,GAAG,KAAK,IAAR,IAAgBC,eAAe,KAAK,CAAxC,EACD,OAAOD,GAAG,CAACI,KAAJ,CAAU,GAAV,EAAe,CAAf,CAAP,CADC,KAGD,OAAO,CAAC,CAAR;AACP,GApB6B,CAsB9B;;;AACAC,EAAAA,WAAW,CAACC,WAAD,EAAcC,GAAd,EAAmB;AAC1B;AACA,QAAID,WAAW,KAAK,CAAC,CAArB,EACI,OAAO,gBAAP,CADJ,KAGI,OAAO,oHAAoHA,WAApH,GAAkI,OAAlI,GAA4IC,GAAnJ;AACP,GA7B6B,CA+B9B;;;AACAC,EAAAA,cAAc,CAACC,OAAD,EAAU;AACpB,QAAIX,IAAI,GAAG,IAAX;AACA,QAAIY,UAAU,GAAG,EAAjB;AACAC,IAAAA,KAAK,CAACF,OAAD,CAAL,CACKG,IADL,CACWC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADnB,EAEKF,IAFL,CAEWE,IAAD,IAAU;AACZ;AACA;AACA;AACA;AACA;AACA,WAAKC,UAAL,CAAgBD,IAAhB;AACH,KATL;AAUH;;AAEDC,EAAAA,UAAU,CAACC,OAAD,EAAU;AAChB,SAAKC,QAAL,CAAc;AACVnB,MAAAA,IAAI,EAAEkB;AADI,KAAd;AAGH;;AAEDE,EAAAA,KAAK,CAACrB,GAAD,EAAK;AACNsB,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBvB,GAAnB;AACA,UAAMwB,WAAW,GAAG,KAAKtB,eAAL,CAAqBF,GAArB,CAApB;AACAsB,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BC,WAA5B;AACA,UAAMC,OAAO,GAAG,KAAKjB,WAAL,CAAiBgB,WAAjB,EAA8B5B,WAAW,CAAC8B,eAA1C,CAAhB,CALM,CAMN;;AACA,SAAKf,cAAL,CAAoBc,OAApB,EAPM,CAQN;AACH,GA9D6B,CAgE9B;;;AAEAE,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,6BACI;AAAA,gCAAa,KAAKC,KAAL,CAAW3B,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AAzE6B;;AA4ElC,eAAeJ,SAAf","sourcesContent":["import { Component } from \"react\"\n\nimport \"./style.css\"\nimport { credentials } from \"../../credentials\"\n\n//Please be responsible with my API key :)\n//API Key - AIzaSyBK9I7LUg_7JHmSg8QrNhxkwK98MnuOKKQ\n//Test URL - https://www.youtube.com/playlist?list=PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU\n//Test URL - https://www.youtube.com/watch?v=EwdsnGfrd-k&list=PL7RVBKKO9UqyEr8kqLe9152SIktQjDl64\n//Test URL - https://www.youtube.com/watch?list=PL7RVBKKO9UqyEr8kqLe9152SIktQjDl64&v=EwdsnGfrd-k\n//https://youtube.googleapis.com/youtube/v3/playlistItems?part=snippet%2CcontentDetails&maxResults=25&playlistId=PLBCF2DAC6FFB574DE&key=AIzaSyBK9I7LUg_7JHmSg8QrNhxkwK98MnuOKKQ\n\nclass DataHound extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n            url: \"\",\n            data: []\n        }\n    }\n\n    //Extracts the playlist ID from the URL\n    get_playlist_id(URL) {\n        //https://www.youtube.com/watch?v=EwdsnGfrd-k&list=PL7RVBKKO9UqyEr8kqLe9152SIktQjDl64\n        const num_equal_signs = (URL.match(/=/g) || []).length\n        if (URL !== null && num_equal_signs === 1)\n            return URL.split(\"=\")[1];\n        else if (URL !== null && num_equal_signs === 2)\n            return URL.split(\"=\")[2];\n        else\n            return -1\n    }\n\n    //Generatres API URL from playlist ID\n    get_api_URL(playlist_ID, key) {\n        //AIzaSyBK9I7LUg_7JHmSg8QrNhxkwK98MnuOKKQ\n        if (playlist_ID === -1)\n            return \"No GET address\"\n        else\n            return 'https://youtube.googleapis.com/youtube/v3/playlistItems?part=snippet%2CcontentDetails&maxResults=25&playlistId=' + playlist_ID + '&key=' + key\n    }\n\n    //Gets the list of video titles from API call\n    get_title_list(get_url) {\n        var data = null\n        var title_list = []\n        fetch(get_url)\n            .then((res) => res.json())\n            .then((json) => {\n                //console.log(json)\n                //data = json\n                //for (var i = 0; i < data.items.length; i++) {\n                //    title_list.push(data.items[i].snippet.title)\n                //}\n                this.updateData(json)\n            })\n    }\n\n    updateData(newData) {\n        this.setState({\n            data: newData\n        })\n    }\n\n    Hound(url){\n        console.log(\"Starting the Hound\")\n        console.log(\"url\", url)\n        const playlist_id = this.get_playlist_id(url)\n        console.log(\"playlist_id:\", playlist_id)\n        const api_url = this.get_api_URL(playlist_id, credentials.youtube_API_key)\n        //console.log(\"api_url\", api_url)\n        this.get_title_list(api_url)\n        //console.log(\"title_list\", title_list)\n    }\n\n    //Hound(data)\n\n    render() {\n        return(\n            <div>\n                <p>Data is: {this.props.data}</p>\n                \n            </div>\n        )\n    }\n}\n\nexport default DataHound"]},"metadata":{},"sourceType":"module"}