{"ast":null,"code":"var _jsxFileName = \"/Users/Rasheed/WS/REPOS/full-mern-stack-video/client/src/pages/Convert/Convert.js\",\n    _s = $RefreshSig$();\n\nimport { React, useEffect, useState } from 'react';\nimport { Link } from \"react-router-dom\";\nimport axios from 'axios';\nimport Cookies from 'universal-cookie';\nimport \"./style.css\";\nimport { credentials } from \"../../credentials\";\nimport DataHound from \"./DataHound\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  //const [data, setData] = useState([]);\n  const [isLoading, setLoading] = useState(true);\n  var spotifyURIs = \"\";\n  const cookies = new Cookies();\n\n  function get_playlist_id(URL) {\n    const num_equal_signs = (URL.match(/=/g) || []).length;\n    if (URL !== null && num_equal_signs === 1) return URL.split(\"=\")[1];else if (URL !== null && num_equal_signs === 2) return URL.split(\"=\")[2];else return -1;\n  }\n\n  function get_api_URL(playlist_ID, key) {\n    //AIzaSyBK9I7LUg_7JHmSg8QrNhxkwK98MnuOKKQ\n    if (playlist_ID === -1) return \"No GET address\";else return 'https://youtube.googleapis.com/youtube/v3/playlistItems?part=snippet%2CcontentDetails&maxResults=25&playlistId=' + playlist_ID + '&key=' + key;\n  }\n\n  function get_title_list(get_url) {\n    var title_list = [];\n    fetch(get_url, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    }).then(res => res.json()).then(json => {\n      //trim data\n      for (var i = 0; i < json.items.length; i++) {\n        title_list.push(json.items[i].snippet.title);\n      } //Remove extra\n\n\n      for (var i = 0; i < title_list.length; i++) {\n        title_list[i] = title_list[i].replace(/\\(.+\\)/ig, '').replace(/\\[.+\\]/ig, '').replace(/official/ig, '').replace(/featuring/ig, '').replace(/feat/ig, '').replace(/video/ig, '').replace(/1080p/ig, '').replace(/music/ig, '').replace(/Audio/ig, '');\n      } //\"https://api.spotify.com/v1/search?query=track%3A{}+artist%3A{}&type=track&offset=0&limit=20\"\n\n\n      var query = \"\";\n      var pre_query = \"https://api.spotify.com/v1/search?query=\";\n      var post_query = \"&type=track&offset=0&limit=20\";\n\n      for (var i = 0; i < title_list.length; i++) {\n        if (title_list[i].includes(\"-\")) {\n          query = \"track:\" + title_list[i].split(\"-\")[1].trim() + \"+\" + \"artist:\" + title_list[i].split(\"-\")[0].trim();\n          query = query.replace(/\\s/ig, '%20');\n        } else {\n          query = \"track:Never%20Gonna%20Give%20You%20Up+artist:Rick%20Ashley\";\n        }\n\n        title_list[i] = pre_query + query + post_query;\n      }\n    }).then(() => {\n      get_tracks(title_list);\n    });\n  }\n\n  function get_tracks(title_uri_list) {\n    axios('https://accounts.spotify.com/api/token', {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': 'Basic ' + btoa(credentials.spotify_API_ID + ':' + credentials.spotify_API_key)\n      },\n      data: 'grant_type=client_credentials',\n      method: 'POST'\n    }).then(tokenResponse => {\n      //Loop through and get track ID's\n      let URI = \"\";\n      let URI_promises = [];\n\n      for (var i = 0; i < title_uri_list.length; i++) {\n        URI_promises.push(axios(title_uri_list[i], {\n          method: 'GET',\n          headers: {\n            'Authorization': 'Bearer ' + tokenResponse.data.access_token,\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          }\n        }).then(serchResponse => {\n          try {\n            URI = \"spotify:track:\" + serchResponse.data[\"tracks\"][\"items\"][0][\"id\"] + \",\"; //Assign trackID\n\n            spotifyURIs += URI;\n          } catch (error) {\n            URI = \"spotify:track:4cOdK2wGLETKBW3PvgPWqT,\"; //Rick Ashley\n\n            spotifyURIs += URI;\n          }\n        }) //end then(searchResponse)\n        );\n      } //end For loop\n\n\n      Promise.all(URI_promises).then(() => {\n        //create playlist\n        //const create_playlist_endpoint = \"https://api.spotify.com/v1/users/\" + localStorage.getItem(\"user_id\") + \"/playlists\";\n        const create_playlist_endpoint = \"https://api.spotify.com/v1/users/\" + cookies.get(\"user_id\") + \"/playlists\";\n        axios(create_playlist_endpoint, {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + cookies.get(\"user_token\")\n          },\n          data: {\n            \"name\": \"Youtube Playlist\",\n            \"description\": \"Playlist of songs converted from a youtube playlist\",\n            \"public\": false\n          }\n        }).then(res => {\n          const PLAYLIST_ID = res[\"data\"][\"id\"]; //add items to a playlist\n\n          const add_items_to_playlist_endpoint = \"https://api.spotify.com/v1/playlists/\" + PLAYLIST_ID + \"/tracks?uris=\" + spotifyURIs;\n          console.log(\"My POST to add songs to playlist\", add_items_to_playlist_endpoint);\n          axios(add_items_to_playlist_endpoint, {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json',\n              'Authorization': 'Bearer ' + cookies.get(\"user_token\")\n            }\n          }); //End Axios\n        }); //End Then\n        //Clear Local storage\n        //localStorage.removeItem(\"user_token\")\n        //localStorage.removeItem(\"user_id\")\n      }); //End Promises then\n    });\n  }\n\n  const {\n    fullURL\n  } = props.userDetails; //const spotifyID = 1254511451;\n\n  const playlist_ID = get_playlist_id(fullURL);\n  const get_address = get_api_URL(playlist_ID, credentials.youtube_API_key);\n  useEffect(() => {\n    get_title_list(get_address);\n    setLoading(false);\n  }, []); //get_tracks(props.userDetails.data)\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"jumbotron text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Conversion Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this), fullURL ? /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: `Converting from: ${fullURL}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No URL entered\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => props.onClear(),\n      children: \"clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: \"Go back \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 9\n  }, this);\n} //<br />\n//<br />\n//<p><b>playlist_ID:</b> {`${playlist_ID}`}</p>\n//<p><b>GET address:</b> {`${get_address}`}</p>\n//<p><b>Data:</b> {props.userDetails.data}</p>\n\n\n_s(App, \"xPrYw7zU0CoGCjtGXuWL2zxIwKw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Rasheed/WS/REPOS/full-mern-stack-video/client/src/pages/Convert/Convert.js"],"names":["React","useEffect","useState","Link","axios","Cookies","credentials","DataHound","App","props","isLoading","setLoading","spotifyURIs","cookies","get_playlist_id","URL","num_equal_signs","match","length","split","get_api_URL","playlist_ID","key","get_title_list","get_url","title_list","fetch","headers","then","res","json","i","items","push","snippet","title","replace","query","pre_query","post_query","includes","trim","get_tracks","title_uri_list","btoa","spotify_API_ID","spotify_API_key","data","method","tokenResponse","URI","URI_promises","access_token","serchResponse","error","Promise","all","create_playlist_endpoint","get","PLAYLIST_ID","add_items_to_playlist_endpoint","console","log","fullURL","userDetails","get_address","youtube_API_key","onClear"],"mappings":"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","sourcesContent":["import { React, useEffect, useState } from 'react'\nimport { Link } from \"react-router-dom\";\nimport axios from 'axios';\nimport Cookies from 'universal-cookie';\n\nimport \"./style.css\"\nimport { credentials } from \"../../credentials\"\nimport DataHound from \"./DataHound\"\n\n\nfunction App(props) {\n    //const [data, setData] = useState([]);\n    const [isLoading, setLoading] = useState(true);\n    var spotifyURIs = \"\"\n    const cookies = new Cookies();\n\n    function get_playlist_id(URL) {\n        const num_equal_signs = (URL.match(/=/g) || []).length\n        if (URL !== null && num_equal_signs === 1)\n            return URL.split(\"=\")[1];\n        else if (URL !== null && num_equal_signs === 2)\n            return URL.split(\"=\")[2];\n        else\n            return -1\n    }\n\n    function get_api_URL(playlist_ID, key) {\n        //AIzaSyBK9I7LUg_7JHmSg8QrNhxkwK98MnuOKKQ\n        if (playlist_ID === -1)\n            return \"No GET address\"\n        else\n            return 'https://youtube.googleapis.com/youtube/v3/playlistItems?part=snippet%2CcontentDetails&maxResults=25&playlistId=' + playlist_ID + '&key=' + key\n    }\n\n    function get_title_list(get_url) {\n        var title_list = []\n        fetch(get_url, {\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        })\n            .then((res) => res.json())\n            .then((json) => {\n                //trim data\n                for (var i = 0; i < json.items.length; i++) {\n                    title_list.push(json.items[i].snippet.title)\n                }\n\n                //Remove extra\n                for (var i = 0; i < title_list.length; i++) {\n                    title_list[i] = title_list[i]\n                        .replace(/\\(.+\\)/ig, '')\n                        .replace(/\\[.+\\]/ig, '')\n                        .replace(/official/ig, '')\n                        .replace(/featuring/ig, '')\n                        .replace(/feat/ig, '')\n                        .replace(/video/ig, '')\n                        .replace(/1080p/ig, '')\n                        .replace(/music/ig, '')\n                        .replace(/Audio/ig, '')\n                }\n                //\"https://api.spotify.com/v1/search?query=track%3A{}+artist%3A{}&type=track&offset=0&limit=20\"\n                var query = \"\"\n                var pre_query = \"https://api.spotify.com/v1/search?query=\"\n                var post_query = \"&type=track&offset=0&limit=20\"\n                for (var i = 0; i < title_list.length; i++) {\n                    if (title_list[i].includes(\"-\")) {\n                        query = \"track:\" + title_list[i].split(\"-\")[1].trim() + \"+\" +\n                            \"artist:\" + title_list[i].split(\"-\")[0].trim()\n                        query = query.replace(/\\s/ig, '%20')\n                    }\n                    else {\n                        query = \"track:Never%20Gonna%20Give%20You%20Up+artist:Rick%20Ashley\"\n                    }\n                    title_list[i] = pre_query + query + post_query\n                }\n            })\n            .then(() => {\n                get_tracks(title_list)\n            })\n    }\n\n    function get_tracks(title_uri_list) {\n        axios('https://accounts.spotify.com/api/token', {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Authorization': 'Basic ' + btoa(credentials.spotify_API_ID + ':' + credentials.spotify_API_key)\n            },\n            data: 'grant_type=client_credentials',\n            method: 'POST'\n        }).then(tokenResponse => {\n            //Loop through and get track ID's\n\n            let URI = \"\";\n            let URI_promises = [];\n\n            for (var i = 0; i < title_uri_list.length; i++) {\n                URI_promises.push(\n                    axios(title_uri_list[i], {\n                        method: 'GET',\n                        headers: {\n                            'Authorization': 'Bearer ' + tokenResponse.data.access_token,\n                            'Accept': 'application/json',\n                            'Content-Type': 'application/json',\n                        }\n                    }).then(serchResponse => {\n                        try {\n                            URI = \"spotify:track:\" + serchResponse.data[\"tracks\"][\"items\"][0][\"id\"] + \",\"//Assign trackID\n                            spotifyURIs += URI\n                        } catch (error) {\n                            URI = \"spotify:track:4cOdK2wGLETKBW3PvgPWqT,\"//Rick Ashley\n                            spotifyURIs += URI\n                        }\n                    })//end then(searchResponse)\n                )\n            } //end For loop\n\n            Promise.all(URI_promises).then(() => {\n                //create playlist\n                //const create_playlist_endpoint = \"https://api.spotify.com/v1/users/\" + localStorage.getItem(\"user_id\") + \"/playlists\";\n                const create_playlist_endpoint = \"https://api.spotify.com/v1/users/\" + cookies.get(\"user_id\") + \"/playlists\";\n                axios(create_playlist_endpoint, {\n                    method: 'POST',\n                    headers: {\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json',\n                        'Authorization': 'Bearer ' + cookies.get(\"user_token\"),\n                    },\n                    data: {\n                        \"name\": \"Youtube Playlist\",\n                        \"description\": \"Playlist of songs converted from a youtube playlist\",\n                        \"public\": false\n                    }\n                }).then(res => {\n                    const PLAYLIST_ID = res[\"data\"][\"id\"]\n                    //add items to a playlist\n                    const add_items_to_playlist_endpoint = \"https://api.spotify.com/v1/playlists/\"+PLAYLIST_ID+\"/tracks?uris=\"+spotifyURIs\n                    console.log(\"My POST to add songs to playlist\", add_items_to_playlist_endpoint)\n                    axios(add_items_to_playlist_endpoint, {\n                        method: 'POST',\n                        headers: {\n                            'Accept': 'application/json',\n                            'Content-Type': 'application/json',\n                            'Authorization': 'Bearer ' + cookies.get(\"user_token\"),\n                        }\n                    })//End Axios\n                })//End Then\n                //Clear Local storage\n                //localStorage.removeItem(\"user_token\")\n                //localStorage.removeItem(\"user_id\")\n            })//End Promises then\n        })\n    }\n\n\n\n    const { fullURL } = props.userDetails;\n\n    //const spotifyID = 1254511451;\n    const playlist_ID = get_playlist_id(fullURL)\n    const get_address = get_api_URL(playlist_ID, credentials.youtube_API_key)\n    useEffect(() => {\n        get_title_list(get_address)\n        setLoading(false);\n\n    }, [])\n\n    //get_tracks(props.userDetails.data)\n\n    if (isLoading) {\n        return <div className=\"App\">Loading...</div>;\n    }\n\n    return (\n        <div class=\"jumbotron text-center\">\n\n            <h1>Conversion Page</h1>\n            {fullURL ? (\n                <h3>{`Converting from: ${fullURL}`}</h3>\n            ) : (\n                <p>No URL entered</p>\n            )}\n            <button type=\"button\" onClick={() => props.onClear()}>\n                clear\n            </button>\n            <br />\n            <button>\n                <Link to=\"/\">Go back </Link>\n            </button>\n\n\n\n        </div>\n    )\n}\n//<br />\n//<br />\n//<p><b>playlist_ID:</b> {`${playlist_ID}`}</p>\n//<p><b>GET address:</b> {`${get_address}`}</p>\n//<p><b>Data:</b> {props.userDetails.data}</p>\nexport default App"]},"metadata":{},"sourceType":"module"}