{"ast":null,"code":"var _jsxFileName = \"/Users/Rasheed/WS/REPOS/full-mern-stack-video/client/src/pages/Convert/DataHound.js\";\nimport { Component } from \"react\";\nimport \"./style.css\"; //Please be responsible with my API key :)\n//API Key - AIzaSyBK9I7LUg_7JHmSg8QrNhxkwK98MnuOKKQ\n//Test URL - https://www.youtube.com/playlist?list=PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU\n//Test URL - https://www.youtube.com/watch?v=EwdsnGfrd-k&list=PL7RVBKKO9UqyEr8kqLe9152SIktQjDl64\n//Test URL - https://www.youtube.com/watch?list=PL7RVBKKO9UqyEr8kqLe9152SIktQjDl64&v=EwdsnGfrd-k\n//https://youtube.googleapis.com/youtube/v3/playlistItems?part=snippet%2CcontentDetails&maxResults=25&playlistId=PLBCF2DAC6FFB574DE&key=AIzaSyBK9I7LUg_7JHmSg8QrNhxkwK98MnuOKKQ\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DataHound extends Component {\n  constructor() {\n    super();\n    this.state = {\n      url: \"\",\n      data: []\n    };\n  }\n\n  get_playlist_id(URL) {\n    //https://www.youtube.com/watch?v=EwdsnGfrd-k&list=PL7RVBKKO9UqyEr8kqLe9152SIktQjDl64\n    const num_equal_signs = (URL.match(/=/g) || []).length;\n    if (URL !== null && num_equal_signs === 1) return URL.split(\"=\")[1];else if (URL !== null && num_equal_signs === 2) return URL.split(\"=\")[2];else return -1;\n  }\n\n  get_api_URL(playlist_ID, key) {\n    //AIzaSyBK9I7LUg_7JHmSg8QrNhxkwK98MnuOKKQ\n    if (playlist_ID === -1) return \"No GET address\";else return 'https://youtube.googleapis.com/youtube/v3/playlistItems?part=snippet%2CcontentDetails&maxResults=25&playlistId=' + playlist_ID + '&key=' + key;\n  }\n\n  get_title_list(get_url) {\n    var data = null;\n    var title_list = [];\n    fetch(get_url).then(res => res.json()).then(json => {\n      data = json;\n\n      for (var i = 0; i < data.items.length; i++) {\n        title_list.push(data.items[i].snippet.title);\n      }\n\n      this.updateData(title_list);\n    });\n  }\n\n  updateData(newData) {\n    this.setState({\n      data: newData\n    });\n  }\n\n  Hound() {\n    console.log(\"Hey\");\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Data is: \", this.props.url]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), this.Hound]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default DataHound;","map":{"version":3,"sources":["/Users/Rasheed/WS/REPOS/full-mern-stack-video/client/src/pages/Convert/DataHound.js"],"names":["Component","DataHound","constructor","state","url","data","get_playlist_id","URL","num_equal_signs","match","length","split","get_api_URL","playlist_ID","key","get_title_list","get_url","title_list","fetch","then","res","json","i","items","push","snippet","title","updateData","newData","setState","Hound","console","log","render","props"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAO,aAAP,C,CAEA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,SAAN,SAAwBD,SAAxB,CAAkC;AAE9BE,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,GAAG,EAAE,EADI;AAETC,MAAAA,IAAI,EAAE;AAFG,KAAb;AAIH;;AAEDC,EAAAA,eAAe,CAACC,GAAD,EAAM;AACjB;AACA,UAAMC,eAAe,GAAG,CAACD,GAAG,CAACE,KAAJ,CAAU,IAAV,KAAmB,EAApB,EAAwBC,MAAhD;AACA,QAAIH,GAAG,KAAK,IAAR,IAAgBC,eAAe,KAAK,CAAxC,EACI,OAAOD,GAAG,CAACI,KAAJ,CAAU,GAAV,EAAe,CAAf,CAAP,CADJ,KAEK,IAAIJ,GAAG,KAAK,IAAR,IAAgBC,eAAe,KAAK,CAAxC,EACD,OAAOD,GAAG,CAACI,KAAJ,CAAU,GAAV,EAAe,CAAf,CAAP,CADC,KAGD,OAAO,CAAC,CAAR;AACP;;AAEDC,EAAAA,WAAW,CAACC,WAAD,EAAcC,GAAd,EAAmB;AAC1B;AACA,QAAID,WAAW,KAAK,CAAC,CAArB,EACI,OAAO,gBAAP,CADJ,KAGI,OAAO,oHAAoHA,WAApH,GAAkI,OAAlI,GAA4IC,GAAnJ;AACP;;AAEDC,EAAAA,cAAc,CAACC,OAAD,EAAU;AACpB,QAAIX,IAAI,GAAG,IAAX;AACA,QAAIY,UAAU,GAAG,EAAjB;AACAC,IAAAA,KAAK,CAACF,OAAD,CAAL,CACKG,IADL,CACWC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADnB,EAEKF,IAFL,CAEWE,IAAD,IAAU;AACZhB,MAAAA,IAAI,GAAGgB,IAAP;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,IAAI,CAACkB,KAAL,CAAWb,MAA/B,EAAuCY,CAAC,EAAxC,EAA4C;AACxCL,QAAAA,UAAU,CAACO,IAAX,CAAgBnB,IAAI,CAACkB,KAAL,CAAWD,CAAX,EAAcG,OAAd,CAAsBC,KAAtC;AACH;;AACD,WAAKC,UAAL,CAAgBV,UAAhB;AACH,KARL;AASH;;AAEDU,EAAAA,UAAU,CAACC,OAAD,EAAU;AAChB,SAAKC,QAAL,CAAc;AACVxB,MAAAA,IAAI,EAAEuB;AADI,KAAd;AAGH;;AAEDE,EAAAA,KAAK,GAAE;AACHC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AAEH;;AAEDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI;AAAA,gCAAa,KAAKC,KAAL,CAAW9B,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEK,KAAK0B,KAFV;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AA7D6B;;AAgElC,eAAe7B,SAAf","sourcesContent":["import { Component } from \"react\"\nimport \"./style.css\"\n\n//Please be responsible with my API key :)\n//API Key - AIzaSyBK9I7LUg_7JHmSg8QrNhxkwK98MnuOKKQ\n//Test URL - https://www.youtube.com/playlist?list=PLDIoUOhQQPlXr63I_vwF9GD8sAKh77dWU\n//Test URL - https://www.youtube.com/watch?v=EwdsnGfrd-k&list=PL7RVBKKO9UqyEr8kqLe9152SIktQjDl64\n//Test URL - https://www.youtube.com/watch?list=PL7RVBKKO9UqyEr8kqLe9152SIktQjDl64&v=EwdsnGfrd-k\n//https://youtube.googleapis.com/youtube/v3/playlistItems?part=snippet%2CcontentDetails&maxResults=25&playlistId=PLBCF2DAC6FFB574DE&key=AIzaSyBK9I7LUg_7JHmSg8QrNhxkwK98MnuOKKQ\n\nclass DataHound extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n            url: \"\",\n            data: []\n        }\n    }\n\n    get_playlist_id(URL) {\n        //https://www.youtube.com/watch?v=EwdsnGfrd-k&list=PL7RVBKKO9UqyEr8kqLe9152SIktQjDl64\n        const num_equal_signs = (URL.match(/=/g) || []).length\n        if (URL !== null && num_equal_signs === 1)\n            return URL.split(\"=\")[1];\n        else if (URL !== null && num_equal_signs === 2)\n            return URL.split(\"=\")[2];\n        else\n            return -1\n    }\n\n    get_api_URL(playlist_ID, key) {\n        //AIzaSyBK9I7LUg_7JHmSg8QrNhxkwK98MnuOKKQ\n        if (playlist_ID === -1)\n            return \"No GET address\"\n        else\n            return 'https://youtube.googleapis.com/youtube/v3/playlistItems?part=snippet%2CcontentDetails&maxResults=25&playlistId=' + playlist_ID + '&key=' + key\n    }\n\n    get_title_list(get_url) {\n        var data = null\n        var title_list = []\n        fetch(get_url)\n            .then((res) => res.json())\n            .then((json) => {\n                data = json\n                for (var i = 0; i < data.items.length; i++) {\n                    title_list.push(data.items[i].snippet.title)\n                }\n                this.updateData(title_list)\n            })\n    }\n\n    updateData(newData) {\n        this.setState({\n            data: newData\n        })\n    }\n\n    Hound(){\n        console.log(\"Hey\")\n\n    }\n\n    render() {\n        return(\n            <div>\n                <p>Data is: {this.props.url}</p>\n                {this.Hound}\n            </div>\n        )\n    }\n}\n\nexport default DataHound"]},"metadata":{},"sourceType":"module"}